# BEGIN DECRYPT
for j in LINEAR_COMB_INDICES:
    tmp_z = self.set_z(1)
    aux_z = self.get_coefficient(j)
    tmp_z = tmp_z * aux_z
    idx = ""
    idx += "c'"
    idx += "_{"
    idx += str(j)
    idx += "}"
    tmp_gt = CT['bold_C_prime'][idx] ** tmp_z
    acc_gt = acc_gt * tmp_gt
for j in LINEAR_COMB_INDICES:
    idx = ""
    idx += "s"
    idx += "_{"
    idx += "2"
    idx += ","
    j_local_0 = LSSS_map[j].tau
    idx += str(j_local_0)
    idx += "}"
    tmp_g = CT['bold_s_g'][idx]
    idx = ""
    idx += "k"
    idx += "_{"
    idx += "2"
    idx += ","
    j_local_1 = LSSS_map[j].attr_repr.value
    idx += self.string_of_attribute(j_local_1)
    idx += "}"
    tmp_h = SK['k_h'][idx]
    tmp_gt = self.pair_groups(tmp_g, tmp_h)
    tmp_z = self.set_z(1)
    aux_z = self.set_z(-1)
    tmp_z = tmp_z * aux_z
    aux_z = self.get_coefficient(j)
    tmp_z = tmp_z * aux_z
    tmp_gt = tmp_gt ** tmp_z
    acc_gt = acc_gt * tmp_gt
for j in LINEAR_COMB_INDICES:
    idx = ""
    idx += "s"
    idx += "_{"
    idx += "1"
    idx += ","
    idx += str(j)
    idx += "}"
    tmp_g = CT['bold_s_g'][idx]
    idx = ""
    idx += "k"
    idx += "_{"
    idx += "1"
    idx += ","
    j_local_0 = LSSS_map[j].attr_repr.auth
    idx += str(j_local_0)
    idx += "}"
    tmp_h = SK['k_h'][idx]
    tmp_gt = self.pair_groups(tmp_g, tmp_h)
    tmp_z = self.set_z(1)
    aux_z = self.set_z(-1)
    tmp_z = tmp_z * aux_z
    aux_z = self.get_coefficient(j)
    tmp_z = tmp_z * aux_z
    tmp_gt = tmp_gt ** tmp_z
    acc_gt = acc_gt * tmp_gt
for j in LINEAR_COMB_INDICES:
    idx = ""
    idx += "c"
    idx += "_{"
    idx += "1"
    idx += ","
    idx += str(j)
    idx += "}"
    tmp_g = CT['bold_C_g'][idx]
    tmp_h = self.get_rgid_h()
    tmp_gt = self.pair_groups(tmp_g, tmp_h)
    tmp_z = self.set_z(1)
    aux_z = self.get_coefficient(j)
    tmp_z = tmp_z * aux_z
    tmp_gt = tmp_gt ** tmp_z
    acc_gt = acc_gt * tmp_gt
for j in LINEAR_COMB_INDICES:
    idx = ""
    idx += "c"
    idx += "_{"
    idx += "2"
    idx += ","
    idx += str(j)
    idx += "}"
    tmp_g = CT['bold_C_g'][idx]
    idx = ""
    idx += "r"
    idx += "_{"
    j_local_0 = LSSS_map[j].attr_repr.auth
    idx += str(j_local_0)
    idx += "}"
    tmp_h = SK['r_h'][idx]
    tmp_gt = self.pair_groups(tmp_g, tmp_h)
    tmp_z = self.set_z(1)
    aux_z = self.get_coefficient(j)
    tmp_z = tmp_z * aux_z
    tmp_gt = tmp_gt ** tmp_z
    acc_gt = acc_gt * tmp_gt
blinding_poly = acc_gt
# END DECRYPT
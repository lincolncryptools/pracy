# BEGIN DECRYPT
idx = ""
idx += "k"
idx += "_{"
idx += "0"
idx += ","
idx += "0"
idx += "}"
tmp_g = SK['k_g'][idx]
idx = ""
idx += "<secret>"
idx += "_{"
idx += "}"
tmp_h = CT['bold_s_h'][idx]
tmp_gt = self.pair_groups(tmp_g, tmp_h)
tmp_z = self.set_z(1)
tmp_gt = tmp_gt ** tmp_z
acc_gt = acc_gt * tmp_gt
for j in LINEAR_COMB_INDICES:
    idx = ""
    idx += "k"
    idx += "_{"
    j_local_0 = LSSS_map[j].attr_repr.value
    idx += self.string_of_attribute(j_local_0)
    idx += "}"
    tmp_g = SK['k_g'][idx]
    idx = ""
    idx += "s"
    idx += "_{"
    j_local_1 = LSSS_map[j].tau
    idx += str(j_local_1)
    idx += "}"
    tmp_h = CT['bold_s_h'][idx]
    tmp_gt = self.pair_groups(tmp_g, tmp_h)
    tmp_z = self.set_z(1)
    aux_z = self.get_coefficient(j)
    tmp_z = tmp_z * aux_z
    tmp_gt = tmp_gt ** tmp_z
    acc_gt = acc_gt * tmp_gt
for j in LINEAR_COMB_INDICES:
    idx = ""
    idx += "r"
    idx += "_{"
    idx += "}"
    tmp_g = SK['r_g'][idx]
    idx = ""
    idx += "c"
    idx += "_{"
    idx += str(j)
    idx += "}"
    tmp_h = CT['bold_C_h'][idx]
    tmp_gt = self.pair_groups(tmp_g, tmp_h)
    tmp_z = self.set_z(1)
    aux_z = self.set_z(-1)
    tmp_z = tmp_z * aux_z
    aux_z = self.get_coefficient(j)
    tmp_z = tmp_z * aux_z
    tmp_gt = tmp_gt ** tmp_z
    acc_gt = acc_gt * tmp_gt
blinding_poly = acc_gt
# END DECRYPT